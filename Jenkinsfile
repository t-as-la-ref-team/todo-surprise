pipeline {
  agent any

  tools {
    nodejs 'NodeJS'
  }

  triggers {
    githubPush()
  }

  environment {
    DISCORD_WEBHOOK_GIT    = credentials('discord-webhook-git')
    DISCORD_WEBHOOK_TEST   = credentials('discord-webhook-test')
    DISCORD_WEBHOOK_SONAR  = credentials('discord-webhook-sonar')
    DEPLOY_FOLDER = "${env.GIT_BRANCH == 'origin/main' ? 'production' : 'staging'}"
  }

  stages {
    stage('Notifier Discord') {
      steps {
        script {
          def author  = sh(script: "git log -1 --pretty=format:%an", returnStdout: true).trim()
          def message = sh(script: "git log -1 --pretty=format:%s", returnStdout: true).trim()
          def branch = env.GIT_BRANCH ?: sh(script: "git rev-parse --abbrev-ref HEAD", returnStdout: true).trim()

          sh """
            curl -H "Content-Type:application/json" -X POST -d '{
              "content": "üì¢ Nouveau **push** d√©tect√© sur la branche `${branch}` ! üöÄ\\nüë§ **Auteur** : ${author}\\nüìù **Commit** : ${message}"
            }' "${DISCORD_WEBHOOK_GIT}"
          """
        }
      }
    }

    stage('Install Frontend Dependencies') {
      steps {
        dir('frontend') {
          sh 'npm ci'
        }
      }
    }

    stage('Test E2E (Cypress)') {
      steps {
        dir('frontend') {
          script {
            def exitCode = sh(script: 'npm run test:e2e', returnStatus: true)
            if (exitCode != 0) {
              echo '‚ùå Tests Cypress √©chou√©s.'
              sh """
                curl -H "Content-Type:application/json" -X POST -d '{
                  "content": "‚ùå **Tests Cypress √©chou√©s !**\\nVoir les r√©sultats dans Jenkins pour plus d‚Äôinformations."
                }' "${DISCORD_WEBHOOK_TEST}"
              """
              error('Fin du build suite √† des erreurs Cypress')
            } else {
              echo '‚úÖ Tests Cypress pass√©s avec succ√®s.'
              sh """
                curl -H "Content-Type:application/json" -X POST -d '{
                  "content": "‚úÖ Tests Cypress pass√©s avec succ√®s !"
                }' "${DISCORD_WEBHOOK_TEST}"
              """
            }
          }
        }
      }
      post {
        always {
          junit testResults: 'frontend/cypress/results/*.xml', allowEmptyResults: true, skipMarkingBuildUnstable: true
        }
      }
    }

    stage('Build Frontend') {
      steps {
        dir('frontend') {
          sh 'npm run build'
        }
      }
    }

    stage('Docker Build and Tag') {
      steps {
        script {
          sh 'docker compose -f docker-compose.yml build'
        }
      }
    }

    stage('Docker Save and Copy Artifacts') {
      steps {
        script {
          def timestamp = sh(script: "date +%Y%m%d-%H%M%S", returnStdout: true).trim()
          def imageTag = "${DEPLOY_FOLDER}-${timestamp}"

          sh """
            docker save my-frontend-image > ${imageTag}-frontend.tar
            docker save my-backend-image > ${imageTag}-backend.tar
            mkdir -p /var/jenkins_home/deploy/${DEPLOY_FOLDER}
            mv ${imageTag}-*.tar /var/jenkins_home/deploy/${DEPLOY_FOLDER}/
          """
        }
      }
    }

    stage('Analyse SonarQube - D√âSACTIV√â') {
      steps {
        echo "Analyse SonarQube temporairement d√©sactiv√©e - scanner non disponible"
        sh """
          curl -H "Content-Type:application/json" -X POST -d '{
            "content": "‚ö†Ô∏è **Analyse SonarQube ignor√©e** - Scanner non disponible"
          }' "${DISCORD_WEBHOOK_SONAR}"
        """
      }
    }

    stage('Notification Analyse') {
      when {
        expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
      }
      steps {
        sh """
          curl -H "Content-Type:application/json" -X POST -d '{
            "content": "üìä Analyse **SonarQube** (d√©sactiv√©e) - build Docker termin√© avec succ√®s dans `${DEPLOY_FOLDER}`."
          }' "${DISCORD_WEBHOOK_SONAR}"
        """
      }
    }
  }

  post {
    failure {
      sh """
        curl -H "Content-Type:application/json" -X POST -d '{
          "content": "üö® **Build √©chou√©** ! Consultez Jenkins pour plus de d√©tails."
        }' "${DISCORD_WEBHOOK_GIT}"
      """
    }
  }
}
