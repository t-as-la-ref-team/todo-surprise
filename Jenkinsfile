pipeline {
  agent any

  tools {
    nodejs 'NodeJS'
  }

  triggers {
    githubPush()
  }

  environment {
    DISCORD_WEBHOOK_GIT    = credentials('discord-webhook-git')
    DISCORD_WEBHOOK_TEST   = credentials('discord-webhook-test')
    DISCORD_WEBHOOK_SONAR  = credentials('discord-webhook-sonar')
  }

  stages {
    stage('Notifier Discord') {
      steps {
        script {
          def author  = sh(script: "git log -1 --pretty=format:%an", returnStdout: true).trim()
          def message = sh(script: "git log -1 --pretty=format:%s", returnStdout: true).trim()
          def branch = env.GIT_BRANCH ?: sh(script: "git rev-parse --abbrev-ref HEAD", returnStdout: true).trim()

          sh """
            curl -H "Content-Type:application/json" -X POST -d '{
              "content": "üì¢ Nouveau **push** d√©tect√© sur la branche `${branch}` ! üöÄ\\nüë§ **Auteur** : ${author}\\nüìù **Commit** : ${message}"
            }' "${DISCORD_WEBHOOK_GIT}"
          """
        }
      }
    }

    stage('Test E2E (Cypress)') {
      steps {
        dir('front') {
          sh 'npm ci'
          script {
            def exitCode = sh(script: 'xvfb-run --auto-servernum -- npm run test:e2e', returnStatus: true)
            if (exitCode != 0) {
              echo '‚ùå Tests Cypress √©chou√©s.'
              sh """
                curl -H "Content-Type:application/json" -X POST -d '{
                  "content": "‚ùå **Tests Cypress √©chou√©s !**\\nVoir les r√©sultats dans Jenkins pour plus d‚Äôinformations."
                }' "${DISCORD_WEBHOOK_TEST}"
              """
              error('Fin du build suite √† des erreurs Cypress')
            } else {
              echo '‚úÖ Tests Cypress pass√©s avec succ√®s.'
              sh """
                curl -H "Content-Type:application/json" -X POST -d '{
                  "content": "‚úÖ Tests Cypress pass√©s avec succ√®s !"
                }' "${DISCORD_WEBHOOK_TEST}"
              """
            }
          }
        }
      }
      post {
        always {
          junit testResults: 'frontend/cypress/results/*.xml', allowEmptyResults: true, skipMarkingBuildUnstable: true
        }
      }
    }

    // Commentez temporairement les √©tapes n√©cessitant npm
    stage('Test E2E (Cypress) - D√âSACTIV√â') {
      steps {
        echo "Tests Cypress temporairement d√©sactiv√©s - Docker non disponible sur le serveur Jenkins"
        sh """
          curl -H "Content-Type:application/json" -X POST -d '{
            "content": "‚ö†Ô∏è **Tests Cypress ignor√©s** - Configuration Docker non disponible"
          }' "${DISCORD_WEBHOOK_TEST}"
        """
      }
    }
    
    // stage('Analyse SonarQube') {
    //   when {
    //     expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
    //   }
    //   steps {
    //     withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]) {
    //       sh '''
    //         sonar-scanner \
    //           -Dsonar.projectKey=t-as-la-ref \
    //           -Dsonar.sources=. \
    //           -Dsonar.host.url=http://212.83.130.69:9000 \
    //           -Dsonar.token=$SONAR_TOKEN
    //       '''
    //     }
    //   }
    // }

    stage('Analyse SonarQube - D√âSACTIV√â') {
      steps {
        echo "Analyse SonarQube temporairement d√©sactiv√©e - sonar-scanner non disponible sur le serveur Jenkins"
        sh """
          curl -H "Content-Type:application/json" -X POST -d '{
            "content": "‚ö†Ô∏è **Analyse SonarQube ignor√©e** - Scanner non disponible"
          }' "${DISCORD_WEBHOOK_SONAR}"
        """
      }
    }

    stage('Notification Analyse') {
      when {
        expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
      }
      steps {
        sh """
          curl -H "Content-Type:application/json" -X POST -d '{
            "content": "üìä Analyse **SonarQube** termin√©e avec succ√®s. üîç"
          }' "${DISCORD_WEBHOOK_SONAR}"
        """
      }
    }
  }
}
